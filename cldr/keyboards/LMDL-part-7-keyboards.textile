h1. Unicode Locale Data Markup Language (LDML) &ndash; Part 7: Keyboards
(Version 24)

h3. _Summary_

This document describes parts of an XML format (_vocabulary_) for the exchange of structured locale data. This format is used in the "Unicode Common Locale Data Repository":http://cldr.unicode.org/.

This is a partial document, describing keyboard mappings. For the other parts of the LDML see the "main LDML document":tr35.html and the links above.

h3. _Status_

_This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications._

bq. _*A Unicode Technical Standard (UTS)* is an independent specification. Conformance to the Unicode Standard does not imply conformance to any UTS._

_Please submit corrigenda and other comments with the CLDR bug reporting form ["Bugs":tr35.html#Bugs]. Related information that is useful in understanding this document is found in the "References":tr35.html#References. For the latest version of the Unicode Standard see ["Unicode":tr35.html#Unicode]. For a list of current Unicode Technical Reports see ["Reports":tr35.html#Reports]. For more information about versions of the Unicode Standard, see ["Versions":tr35.html#Versions]._

h2. "Parts":#Parts

The LDML specification is divided into the following parts:

* Part 1: "Core specification":tr35.html#Contents (languages, locales, basic structure)
* Part 2: "General":tr35-general.html#Contents (display names &amp; transforms, etc.)
* Part 3: "Numbers":tr35-numbers.html#Contents (number &amp; currency formatting)
* Part 4: "Dates":tr35-dates.html#Contents (date, time, time zone formatting)
* Part 5: "Collation":tr35-collation.html#Contents (sorting, searching, grouping)
* Part 6: "Related Information":tr35-info.html#Contents (supplemental data)
* Part 7: "Keyboards":tr35-keyboards.html#Contents (keyboard mappings)

h2. "Contents of Part 7, Keyboards":#Contents

* 1 "Keyboards":#Keyboards
** 1.1 "Goals and Nongoals":#Goals_and_Nongoals
** 1.2 "Definitions":#Definitions
** 1.3 "File and Directory Structure":#File_and_Dir_Structure
** 1.4 "Element Hierarchy - Layout File":#Element_Heirarchy_Layout_File
*** 1.4.1 "Element: keyboard":#Element_Keyboard
*** 1.4.2 "Element: version":#Element_version
*** 1.4.3 "Element: generation":#Element_generation
*** 1.4.4 "Element: names":#Element_names
*** 1.4.5 "Element: name":#Element_name
*** 1.4.6 "Element: settings":#Element_settings
*** 1.4.7 "Element: keyMap":#Element_keyMap
*** 1.4.8 "Element: map":#Element_map
*** 1.4.9 "Element: transforms":#Element_transforms
*** 1.4.10 "Element: transform":#Element_transform
** 1.5 "Element Hierarchy - Platform File":#Element_Heirarchy_Platform_File
*** 1.5.1 "Element: platform":#Element_platform
*** 1.5.2 "Element: hardwareMap":#Element_hardwareMap
*** 1.5.3 "Element: map":#Element_hardwareMap_map
** 1.6 "Invariants":#Invariants
** 1.7 "Data Sources":#Data_Sources
** 1.8 "Keyboard IDs":#Keyboard_IDs
*** 1.8.1 "Principles for Keyboard Ids":#Principles_for_Keyboard_Ids
** 1.9 "Platform Behaviors in Edge Cases":#Platform_Behaviors_in_Edge_Cases

h2. 1 "Keyboards":#Keyboards

The CLDR keyboard format provides for the communication of keyboard mapping data between different modules, and the comparison of data across different vendors and platforms. The standardized identifier for keyboards can be used to communicate, internally or externally, a request for a particular keyboard mapping that is to be used to transform either text or keystrokes. The corresponding data can then be used to perform the requested actions.

For example, a web-based virtual keyboard may transform text in the following way. Suppose the user types a key that produces a &quot;W&quot; on a qwerty keyboard. A web-based tool using an azerty virtual keyboard can map that text (&quot;W&quot;) to the text that would have resulted from typing a key on an azerty keyboard, by transforming &quot;W&quot; to &quot;Z&quot;. Such transforms are in fact performed in existing web applications.

The data can also be used in analysis of the capabilities of different keyboards. It also allows better interoperability by making it easier for keyboard designers to see which characters are generally supported on keyboards for given languages.

To illustrate this specification, here is an abridged layout representing the English US 101 keyboard on the Mac OSX operating system (with an inserted long-press example). For more complete examples, and information collected about keyboards, see keyboard data in XML.

bc. <keyboard locale="en-t-k0-osx">  <version platform="10.4" number="$Revision: 8294 $" />    <generation date="$Date: 2013-03-09 01:08:49 -0800 (Sat, 09 Mar 2013) $" />   <names>       <name value="U.S." />     </names>  <keyMap>      <map iso="E00" to="`" />      <map iso="E01" to="1" />      <map iso="D01" to="q" />      <map iso="D02" to="w" />      <map iso="D03" to="e" longPress="é è ê ë" />      …   </keyMap> <keyMap modifiers="caps">     <map iso="E00" to="`" />      <map iso="E01" to="1" />      <map iso="D01" to="Q" />      <map iso="D02" to="W" />      …   </keyMap> <keyMap modifiers="opt">      <map iso="E00" to="`" />      <map iso="E01" to="¡" /> <!-- key=1 -->     <map iso="D01" to="œ" /> <!-- key=Q -->     <map iso="D02" to="∑" /> <!-- key=W -->     …   </keyMap> <transforms type="simple">br>      <transform from="` " to="`" />        <transform from="`a" to="à" />        <transform from="`A" to="À" />        <transform from="´ " to="´" />        <transform from="´a" to="á" />        <transform from="´A" to="Á" />        <transform from="˜ " to="˜" />        <transform from="˜a" to="ã" />        <transform from="˜A" to="Ã" />        …   </transforms></keyboard>


And its associated platform file (which includes the hardware mapping):

bc. <platform id="osx">  <hardwareMap>     <map keycode="0" iso="C01" />     <map keycode="1" iso="C02" />     <map keycode="6" iso="B01" />     <map keycode="7" iso="B02" />     <map keycode="12" iso="D01" />        <map keycode="13" iso="D02" />        <map keycode="18" iso="E01" />        <map keycode="50" iso="E00" />    </hardwareMap></platform>


h3. 1.1 "Goals and Nongoals":#Goals_and_Nongoals

Some goals of this format are:

# Make the XML as readable as possible.
# Represent faithfully keyboard data from major platforms: it should be possible to create a functionally-equivalent data file (such that given any input, it can produce the same output).
# Make as much commonality in the data across platforms as possible to make comparison easy.

Some non-goals (outside the scope of the format) currently are:

# Display names or symbols for keycaps (eg, the German name for &quot;Return&quot;). If that were added to LDML, it would be in a different structure, outside the scope of this section.
# Advanced IME features, handwriting recognition, etc.
# Roundtrip mappings -- the ability to recover precisely the same format as an original platform's representation. In particular, the internal structure may have no relation to the internal structure of external keyboard source data, the only goal is functional equivalence.
# More sophisticated transforms, such as for Indic character rearrangement. It is anticipated that these would be added to a future version, after working out a reasonable representation.

Note: During development of this section, it was considered whether the modifier RAlt (=AltGr) should be merged with Option. In the end, they were kept separate, but for comparison across platforms implementers may choose to unify them.

h3. 1.2 "Definitions":#Definitions

Keyboard: The physical keyboard.

Key: A key on a physical keyboard.

Modifier: A key that is held to change the behavior of a keyboard. For example, the &quot;Shift&quot; key allows access to upper-case characters on a US keyboard. Other modifier keys include but is not limited to: Ctrl, Alt, Option, Command and Caps Lock.

Key code: The integer code sent to the application on pressing a key.

ISO position: The corresponding position of a key using the ISO layout convention where rows are identified by letters and columns are identified by numbers. For example, &quot;D01&quot; corresponds to the &quot;Q&quot; key on a US keyboard. For the purposes of this document, an ISO layout position is depicted by a one-letter row identifier followed by a two digit column number (like &quot;B03&quot;, &quot;E12&quot; or &quot;C00&quot;). The following diagram depicts a typical US keyboard layout superimposed with the ISO layout indicators (it is important to note that the number of keys and their physical placement relative to each-other in this diagram is irrelevant, rather what is important is their logical placement using the ISO convention):!images/keyPositions.png(keyboard layout example showing ISO key numbering)!

One may also extend the notion of the ISO layout to support keys that don't map directly to the diagram above (such as the Android device - see diagram). Per the ISO standard, the space bar is mapped to &quot;A03&quot;, so the period and comma keys are mapped to &quot;A02&quot; and &quot;A04&quot; respectively based on their relative position to the space bar. Also note that the &quot;E&quot; row does not exist on the Android keyboard.

!images/androidKeyboard.png(keyboard layout example showing extension of ISO key numbering)!

If it becomes necessary in the future, the format could extend the ISO layout to support keys that are located to the left of the &quot;00&quot; column by using negative column numbers &quot;-01&quot;, &quot;-02&quot; and so on, or 100's complement &quot;99&quot;, &quot;98&quot;,...

Hardware map: A mapping between key codes and ISO layout positions.

Base character: The character emitted by a particular key when no modifiers are active. In ISO terms, this is group 1, level 1.

Base map: A mapping from the ISO positions to the base characters. There is only one base map per layout. The characters on this map can be output by not using any modifier keys.

Key map: The basic mapping between ISO positions and the output characters for each set of modifier combinations associated with a particular layout. There may be multiple key maps for each layout.

Transform: A transform is simply a combination of key presses that gets transformed into one (or more) final characters. For example, in most latin keyboards hitting the &quot;^&quot; dead-key followed by the &quot;e&quot; key produces &quot;ê&quot;.

Layout: A layout is the overall keyboard configuration for a particular locale. Within a keyboard layout, there is a single base map, one or more key maps and one or more transforms.

h3. 1.3 "File and Directory Structure":#File_and_Dir_Structure

Each platform has its own directory, where a &quot;platform&quot; is a designation for a set of keyboards available from a particular source, such as Windows or Chromeos. This directory name is the platform name (see Table 2 located further in the document). Within this directory there are two types of files:

# A single platform file (see XML structure for Platform file), this file includes a mapping of hardware key codes to the ISO layout positions. This file is also open to expansion for any configuration elements that are valid across the whole platform and that are not layout specific. This file is simply called &#95;platform.xml.
# Multiple layout files named by their locale identifiers. (eg. lt-t-k0-chromeos.xml or ne-t-k0-windows.xml).

h3. 1.4 "Element Hierarchy - Layout File":#Element_Heirarchy_Layout_File

h4. 1.4.1 "Element: keyboard":#Element_Keyboard

This is the top level element. All other elements defined below are under this element.

Syntax

&lt;keyboard locale=&quot;{locale ID}&quot;&gt;

{definition of the layout as described by the elements defined below}

&lt;/keyboard&gt;

Attribute: locale (required)

This mandatory attribute represents the locale of the keyboard using Unicode locale identifiers (see "LDML":tr35.html) - for example 'el' for Greek. Sometimes, the locale may not specify the base language. For example, a Devanagari keyboard for many languages could be specified by BCP-47 code: 'und-Deva'. For details, see "Keyboard IDs":#Keyboard_IDs .

Examples (for illustrative purposes only, not indicative of the real data)

bc. <keyboard locale="ka-t-k0-qwerty-windows">
  …
</keyboard>
<keyboard locale="fr-CH-t-k0-android">
  …
</keyboard>


<hr />

h4. 1.4.2 "Element: version":#Element_version

Element used to keep track of the source data version.
 
 Syntax

&lt;version platform=&quot;..&quot; revision=&quot;..&quot;&gt;


Attribute: platform (required)

The platform source version. Specifies what version of the platform the data is from. For example, data from Mac OSX 10.4 would be specified as platform=&quot;10.4&quot;. For platforms that have unstable version numbers which change frequently (like Linux), this field is set to an integer representing the iteration of the data starting with &quot;1&quot;. This number would only increase if there were any significant changes in the keyboard data.

Attribute: number (required)

The data revision version.

Attribute: cldrVersion (fixed by DTD)

The CLDR specification version that is associated with this data file. This value is fixed and is inherited from the DTD file and therefore does not show up directly in the XML file.

Example

&lt;keyboard locale=&quot;..-osx&quot;&gt;

...

&lt;version platform=&quot;10.4&quot; number=&quot;1&quot;/&gt;

...

&lt;/keyboard&gt;

<hr />

h4. 1.4.3 "Element: generation":#Element_generation

Element used to keep track of the generation date of the data.
 
 Syntax

&lt;generation date=&quot;..&quot;&gt;


Attribute: date (required)

The date the data was generated.

Example

&lt;keyboard locale=&quot;..&quot;&gt;

...

&lt;generation date=&quot;$Date: 2013-03-09 01:08:49 -0800 (Sat, 09 Mar 2013) $&quot;/&gt;

...

&lt;/keyboard&gt;

<hr />

h4. 1.4.4 "Element: names":#Element_names

Element used to store any names given to the layout by the platform.
 
 Syntax

&lt;names&gt;

{set of name elements}

&lt;/names&gt;


h4. 1.4.5 "Element: name":#Element_name

A single name given to the layout by the platform.
 
 Syntax

&lt;name value=&quot;..&quot;&gt;


Attribute: value (required)

The name of the layout.

Example

&lt;keyboard locale=&quot;bg-t-k0-windows-phonetic-trad&quot;&gt;

...

&lt;names&gt;

&lt;name value=&quot;Bulgarian (Phonetic Traditional)&quot;/&gt;

&lt;/names&gt;

...

&lt;/keyboard&gt;

<hr />

h4. 1.4.6 "Element: settings":#Element_settings

An element used to keep track of layout specific settings. This element may or may not show up on a layout. These settings reflect the normal practice on the platform. However, an implementation using the data may customize the behavior. For example, for transformFailures the implementation could ignore the setting, or modify the text buffer in some other way (such as by emitting backspaces).
 
 Syntax

&lt;settings [fallback=&quot;omit&quot;] [transformFailure=&quot;omit&quot;] [transformPartial=&quot;hide&quot;]&gt;


Attribute: fallback=&quot;omit&quot; (optional)

The presence of this attribute means that when a modifier key combination goes unmatched, no output is produced. The default behavior (when this attribute is not present) is to fallback to the base map when the modifier key combination goes unmatched.

If this attribute is present, it must have a value of omit.

Attribute: transformFailure=&quot;omit&quot; (optional)

This attribute describes the behavior of a transform when it is escaped (see the transform element in the Layout file for more information). A transform is escaped when it can no longer continue due to the entry of an invalid key. For example, suppose the following set of transforms are valid:

<blockquote>

^e → ê

^a → â

</blockquote>

Suppose a user now enters the &quot;^&quot; key then &quot;^&quot; is now stored in a buffer and may or may not be shown to the user (see the partial attribute).

If a user now enters d, then the transform has failed and there are two options for output.

1. default behavior - &quot;^d&quot;

2. omit - &quot;&quot; (nothing and the buffer is cleared)

The default behavior (when this attribute is not present) is to emit the contents of the buffer upon failure of a transform.

If this attribute is present, it must have a value of omit.

Attribute: transformPartial=&quot;hide&quot; (optional)

This attribute describes the behavior the system while in a transform. When this attribute is present then don't show the values of the buffer as the user is typing a transform (this behavior can be seen on Windows or Linux platforms).

By default (when this attribute is not present), show the values of the buffer as the user is typing a transform (this behavior can be seen on the Mac OSX platform).

If this attribute is present, it must have a value of hide.

Example

&lt;keyboard locale=&quot;bg-t-k0-windows-phonetic-trad&quot;&gt;

...

&lt;settings fallback=&quot;omit&quot; transformPartial=&quot;hide&quot;&gt;

...

&lt;/keyboard&gt;

Indicates that:

# When a modifier combination goes unmatched, do not output anything when a key is pressed.
# If a transform is escaped, output the contents of the buffer.
# During a transform, hide the contents of the buffer as the user is typing.

<hr />

h4. 1.4.7 "Element: keyMap":#Element_keyMap

This element defines the group of mappings for all the keys that use the same set of modifier keys. It contains one or more map elements.

Syntax

&lt;keyMap [modifiers=&quot;{Set of Modifier Combinations}&quot;]&gt;

{a set of map elements}

&lt;/keyMap&gt;

Attribute: modifiers (optional)

A set of modifier combinations that cause this key map to be &quot;active&quot;. Each combination is separated by a space. The interpretation is that there is a match if any of the combinations match, that is, they are ORed. Therefore, the order of the combinations within this attribute does not matter.
 
 A combination is simply a concatenation of words to represent the simultaneous activation of one or more modifier keys. The order of the modifier keys within a combination does not matter, although don't care cases are generally added to the end of the string for readability (see next paragraph). For example: &quot;cmd+caps&quot; represents the Caps Lock and Command modifier key combination. Some keys have right or left variant keys, specified by a 'R' or 'L' suffix. For example: &quot;ctrlR+caps&quot; would represent the Right-Control and Caps Lock combination. For simplicity, the presence of a modifier without a 'R' or 'L' suffix means that either its left or right variants are valid. So &quot;ctrl+caps&quot; represents the same as &quot;ctrlL+ctrlR?+caps ctrlL?+ctrlR+caps&quot;

A modifier key may be further specified to be in a &quot;don't care&quot; state using the '?' suffix. The &quot;don't care&quot; state simply means that the preceding modifier key may be either ON or OFF. For example &quot;ctrl+shift?&quot; could be expanded into &quot;ctrl ctrl+shift&quot;.

Within a combination, the presence of a modifier WITHOUT the '?' suffix indicates this key MUST be on. The converse is also true, the absence of a modifier key means it MUST be off for the combination to be active.

Here is an exhaustive list of all possible modifier keys:

Possible Modifier Keys

Modifier Keys

 

Comments

altL

altR

xAlty → xAltR+AltL? xAltR?AltLy

ctrlL

ctrlR

ditto for Ctrl

shiftL

shiftR

ditto for Shift

optL

optR

ditto for Opt

caps

 

Caps Lock

cmd

 

Command on the Mac

All sets of modifier combinations within a layout are disjoint with no-overlap existing between the key maps. That is, for every possible modifier combination, there is at most a single match within the layout file. There are thus never multiple matches. If no exact match is available, the match falls back to the base map unless the fallback=&quot;omit&quot; attribute in the settings element is set, in which case there would be no output at all.

To illustrate, the following example produces an invalid layout because pressing the &quot;Ctrl&quot; modifier key produces an indeterminate result:

&lt;keyMap modifiers=&quot;ctrl+shift?&quot;&gt;

...

&lt;/keyMap&gt;

&lt;keyMap modifiers=&quot;ctrl&quot;&gt;

...

&lt;/keyMap&gt;

Modifier Examples:

&lt;keyMap modifiers=&quot;cmd?+opt+caps?+shift&quot; /&gt;

Caps-Lock may be ON or OFF, Option must be ON, Shift must be ON and Command may be ON or OFF.

&lt;keyMap modifiers=&quot;shift caps&quot; fallback=&quot;true&quot; /&gt;

Caps-Lock must be ON OR Shift must be ON. Is also the fallback key map.

If the modifiers attribute is not present on a keyMap then that particular key map is the base map.

h4. 1.4.8 "Element: map":#Element_map

This element defines a mapping between the base character and the output for a particular set of active modifier keys. This element must have the keyMap element as its parent.

If a map element for a particular ISO layout position has not been defined then if this key is pressed, no output is produced.

Syntax

bc. <map
 iso="{the iso position}"
 to="{the output}"
 [longPress="{long press keys}"]
 [transform="no"]
/><!-- {Comment to improve readability (if needed)} -->


Attribute: iso (exactly one of base and iso is required)

The iso attribute represents the ISO layout position of the key (see the definition at the beginning of the document for more information).

Attribute: to (required)

The to attribute contains the output sequence of characters that is emitted when pressing this particular key. Control characters, whitespace (other than the regular space character) and combining marks in this attribute are escaped using the \u{...} notation.

Attribute: longPress (optional)

The longPress attribute contains any characters that can be emitted by &quot;long-pressing&quot; a key, this feature is prominent in mobile devices. The possible sequences of characters that can be emitted are whitespace delimited. Control characters, combining marks and whitespace (which is intended to be a long-press option) in this attribute are escaped using the \u{...} notation.

Attribute: transform=&quot;no&quot; (optional)

The transform attribute is used to define a key that never participates in a transform but its output shows up as part of a transform. This attribute is necessary because two different keys could output the same characters (with different keys or modifier combinations) but only one of them is intended to be a dead-key and participate in a transform. This attribute value must be no if it is present.

For example, suppose there are the following keys, their output and one transform:

<blockquote>

E00 outputs `

Option+E00 outputs ` (the dead-version which participates in transforms).

`e → è

</blockquote>

Then the first key must be tagged with transform=&quot;no&quot; to indicate that it should never participate in a transform.

Comment: US key equivalent, base key, escaped output and escaped longpress

In the generated files, a comment is included to help the readability of the document. This comment simply shows the English key equivalent (with prefix key=), the base character (base=), the escaped output (to=) and escaped long-press keys (long=). These comments have been inserted strategically in places to improve readability. Not all comments include include all components since some of them may be obvious.

Examples

bc. <keyboard locale="fr-BE-t-k0-windows">   …   <keyMap modifiers="shift">        <map iso="D01" to="A" /> <!-- key=Q -->     <map iso="D02" to="Z" /> <!-- key=W -->     <map iso="D03" to="E" />      <map iso="D04" to="R" />      <map iso="D05" to="T" />      <map iso="D06" to="Y" />      …   </keyMap> …</keyboard><keyboard locale="ps-t-k0-windows"> …   <keyMap modifiers='altR+caps? ctrl+alt+caps?'>        <map iso="D04" to="\u{200e}" /> <!-- key=R base=ق -->       <map iso="D05" to="\u{200f}" /> <!-- key=T base=ف -->       <map iso="D08" to="\u{670}" /> <!-- key=I base=ه to= ٰ -->      …   </keyMap> …</keyboard>


<hr />

h4. 1.4.9 "Element: transforms":#Element_transforms

This element defines a group of one or more transform elements associated with this keyboard layout. This is used to support dead-keys using a straightforward structure that works for all the keyboards tested, and that results in readable source data.

There can be multiple &lt;transforms&gt; elements; at this point the &quot;simple&quot; one is defined.

Syntax

&lt;transforms type=&quot;...&quot;&gt;

{a set of transform elements}

&lt;/transforms&gt;

Attribute: type (required)

The value is &quot;simple&quot; for the transforms listed below. People have legitimate needs for more complex transforms, and more sophisticated types of transforms may be added over time. (Doing the more sophisticated transforms would take much more time, since it would require a thorough survey of the major keyboard mechanisms that use them, development of a unified mechanism that handles all the requirements, and coding to ensure sure programmatically mapping those mechanisms into the standard is possible, and so on.)

h4. 1.4.10 "Element: transform":#Element_transform

This element must have the transforms element as its parent. This element represents a single transform that may be performed using the keyboard layout. A transform is simply a combination of key presses that gets transformed into one (or more) final characters. For example, in most French keyboards hitting the &quot;^&quot; dead-key followed by the &quot;e&quot; key produces &quot;ê&quot;.

Syntax

&lt;transform from=&quot;{combination of characters}&quot; to=&quot;{output}&quot;&gt;

Attribute: from (required)

This is the combination of keys that must be pressed in order to activate this transform. Each character in this series of characters must match a character that is located in some chars attribute in the document.

For example, suppose there are the following transforms:

<blockquote>

^e → ê

^a → â

^o → ô

</blockquote>

If the user types a key that produces &quot;^&quot;, the keyboard enters a dead state. When the user then types a key that produces an &quot;e&quot;, the transform is invoked, and &quot;ê&quot; is output. Suppose a user presses keys producing &quot;^&quot; then &quot;u&quot;. In this case, there is no match for the &quot;^u&quot;, and the &quot;^&quot; is output if the failure attribute in the transform element is set to emit. If there is no transform starting with &quot;u&quot;, then it is also output (again only if failure is set to emit) and the mechanism leaves the &quot;dead&quot; state.

The UI may show an initial sequence of matching characters with a special format, as is done with dead-keys on the Mac, and modify them as the transform completes. This behavior is specified in the partial attribute in the transform element.

Most transforms in practice have only a couple of characters. But for completeness, the behavior is defined on all strings:

# If there could be a longer match if the user were to type additional keys, go into a 'dead' state.
# If there could not be a longer match, find the longest actual match, emit the transformed text (if failure is set to emit), and start processing again with the remainder.
# If there is no possible match, output the first character, and start processing again with the remainder.

Suppose that there is the following transforms:

<blockquote>

ab → x

abc → y

abef → z

bc → m

beq → n

</blockquote>

Here's what happens when the user types various sequence characters:

Input characters

Result

Comments

ab

 

No output, since there is a longer transform with this as prefix.

abc

y

Complete transform match.

abd

xd

The longest match is &quot;ab&quot;, so that is converted and output. The 'd' follows, since it is not the start of any transform.

abeq

xeq

&quot;ab&quot; wins over &quot;beq&quot;, since it comes first. That is, there is no longer possible match starting with 'a'.

bc

m

 

Control characters, combining marks and whitespace in this attribute are escaped using the \u{...} notation.

Attribute: to (required)

This attribute represents the characters that are output from the transform. This may be more than one, so you could have &lt;transform from=&quot;´A&quot; to=&quot;Fred&quot;/&gt;

Control characters, whitespace (other than the regular space character) and combining marks in this attribute are escaped using the \u{...} notation.

Examples

bc. <keyboard locale="fr-CA-t-k0-CSA-osx">   <transforms type="simple">        <transform from="´a" to="á" />        <transform from="´A" to="Á" />        <transform from="´e" to="é" />        <transform from="´E" to="É" />        <transform from="´i" to="í" />        <transform from="´I" to="Í" />        <transform from="´o" to="ó" />        <transform from="´O" to="Ó" />        <transform from="´u" to="ú" />        <transform from="´U" to="Ú" />    </transforms> ...</keyboard><keyboard locale="nl-BE-t-k0-chromeos">   <transforms type="simple">        <transform from="\u{30c}a" to="ǎ" /> <!-- ̌a → ǎ -->        <transform from="\u{30c}A" to="Ǎ" /> <!-- ̌A → Ǎ -->        <transform from="\u{30a}a" to="å" /> <!-- ̊a → å -->        <transform from="\u{30a}A" to="Å" /> <!-- ̊A → Å -->    </transforms> ...</keyboard>


h3. 1.5 "Element Hierarchy - Platform File":#Element_Heirarchy_Platform_File

There is a separate XML structure for platform-specific configuration elements. The most notable component is a mapping between the hardware key codes to the ISO layout positions for that platform.

h4. 1.5.1 "Element: platform":#Element_platform

This is the top level element. This element contains a set of elements defined below. A document shall only contain a single instance of this element.

Syntax

&lt;platform&gt;

{platform-specific elements}

&lt;/platform&gt;

h4. 1.5.2 "Element: hardwareMap":#Element_hardwareMap

This element must have a platform element as its parent. This element contains a set of map elements defined below. A document shall only contain a single instance of this element.

Syntax

bc. <platform>
    <hardwareMap>
        {a set of map elements}
    </hardwareMap>
</platform>


h4. 1.5.3 "Element: map":#Element_hardwareMap_map

This element must have a hardwareMap element as its parent. This element maps between a hardware keycode and the corresponding ISO layout position of the key.

Syntax

&lt;map keycode=&quot;{hardware keycode}&quot; iso=&quot;{ISO layout position}&quot;/&gt;

Attribute: keycode (required)

The hardware key code value of the key. This value is an integer which is provided by the keyboard driver.

Attribute: iso (required)

The corresponding position of a key using the ISO layout convention where rows are identified by letters and columns are identified by numbers. For example, &quot;D01&quot; corresponds to the &quot;Q&quot; key on a US keyboard. (See the definition at the beginning of the document for a diagram).

Examples

bc. <platform>   <hardwareMap>     <map keycode="2" iso="E01" />     <map keycode="3" iso="E02" />     <map keycode="4" iso="E03" />     <map keycode="5" iso="E04" />     <map keycode="6" iso="E05" />     <map keycode="7" iso="E06" />     <map keycode="41" iso="E00" />    </hardwareMap></platform>


h3. 1.6 "Invariants":#Invariants

Beyond what the DTD imposes, certain other restrictions on the data are imposed on the data.

# For a given platform, every map[&#64;iso] value must be in the hardwareMap if there is one (&#95;keycodes.xml)
# Every map[&#64;base] value must also be in base[&#64;base] value
# No keyMap[&#64;modifiers] value can overlap with another keyMap[&#64;modifiers] value.
#* eg you can't have &quot;RAlt Ctrl&quot; in one keyMap, and &quot;Alt Shift&quot; in another (because Alt = RAltLAlt).
# Every sequence of characters in a transform[&#64;from] value must be a concatenation of two or more map[&#64;to] values.
#* eg with &lt;transform from=&quot;xyz&quot; to=&quot;q&quot;&gt; there must be some map values to get there, such as &lt;map... to=&quot;xy&quot;&gt; &amp; &lt;map... to=&quot;z&quot;&gt;
# There must be either 0 or 1 of (keyMap[&#64;fallback] or baseMap[&#64;fallback]) attributes
# If the base and chars values for modifiers=&quot;&quot; are all identical, and there are no longpresses, that keyMap must not appear (??)
# There will never be overlaps among modifier values.
# A modifier set will never have ? (optional) on all values
#* eg, you'll never have RCtrl?Caps?LShift?
# Every base[&#64;base] value must be unique.
# A modifier attribute value will aways be minimal, observing the following simplification rules. 


Notation

Notes

Lower case character (eg. !https://www.google.com/chart?cht=tx&chf=bg,s,FFFFFF00&chco=000000&chl=x! )

Interpreted as any combination of modifiers.
 (eg. !https://www.google.com/chart?cht=tx&chf=bg,s,FFFFFF00&chco=000000&chl=x! = CtrlShiftOption)

Upper-case character (eg. !https://www.google.com/chart?cht=tx&chf=bg,s,FFFFFF00&chco=000000&chl=Y!)

Interpreted as a single modifier key (which may or may not have a L and R variant)
 (eg. !https://www.google.com/chart?cht=tx&chf=bg,s,FFFFFF00&chco=000000&chl=Y! = Ctrl, !https://www.google.com/chart?cht=tx&chf=bg,s,FFFFFF00&chco=000000&chl=RY! = RCtrl, etc..)

Y? ⇔ Y ∨ ∅

Y ⇔ LY ∨ RY ∨ LYRY

Eg. Opt? ⇔ ROpt ∨ LOpt ∨ ROptLOpt !https://www.google.com/chart?cht=tx&chf=bg,s,FFFFFF00&chco=000000&chl=%5Cvee%7B%7D! ∅
 Eg. Opt ⇔ ROpt ∨ LOpt ∨ ROptLOpt

Axiom

Example

xY ∨ x ⇒ xY?

OptCtrlShift OptCtrl → OptCtrlShift?

xRY ∨ xY? ⇒ xY?

xLY ∨ xY? ⇒ xY?

OptCtrlRShift OptCtrlShift? → OptCtrlShift?

xRY? ∨ xY ⇒ xY?

xLY? ∨ xY ⇒ xY?

OptCtrlRShift? OptCtrlShift → OptCtrlShift?

xRY? ∨ xY? ⇒ xY?

xLY? ∨ xY? ⇒ xY?

OptCtrlRShift? OptCtrlShift? → OptCtrlShift?

xRY ∨ xY ⇒ xY

xLY ∨ xY ⇒ xY

OptCtrlRShift OptCtrlShift → OptCtrlShift?

LY?RY?

OptRCtrl?LCtrl? → OptCtrl?

xLY? ⋁ xLY ⇒ xLY?

 

xY? ⋁ xY ⇒ xY?

 

xY? ⋁ x ⇒ xY?

 

xLY? ⋁ x ⇒ xLY?

 

xLY ⋁ x ⇒ xLY?

 

h3. 1.7 "Data Sources":#Data_Sources

Here is a list of the data sources used to generate the initial key map layouts:

Platform

Source

Notes

Android

Android 4.0 - Ice Cream Sandwich
 ("http://source.android.com/source/downloading.html":http://source.android.com/source/downloading.html)

Parsed layout files located in packages/inputmethods/LatinIME/java/res

ChromeOS

XKB ("http://www.x.org/wiki/XKB":http://www.x.org/wiki/XKB)

The ChromeOS represents a very small subset of the keyboards available from XKB.

Mac OSX

Ukelele bundled System Keyboards ("http://scripts.sil.org/cms/scripts/page.php?site&#95;id=nrsi&amp;id=ukelele":http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=ukelele)

These layouts date from Mac OSX 10.4 and are therefore a bit outdated

Windows

Generated .klc files from the Microsoft Keyboard Layout Creator ("http://msdn.microsoft.com/en-us/goglobal/bb964665":http://msdn.microsoft.com/en-us/goglobal/bb964665)

For interactive layouts, see also "http://msdn.microsoft.com/en-us/goglobal/bb964651":http://msdn.microsoft.com/en-us/goglobal/bb964651

h3. 1.8 "Keyboard IDs":#Keyboard_IDs

There is a set of subtags that help identify the keyboards. Each of these are used after the &quot;t-k0&quot; subtags to help identify the keyboards. The first tag appended is a mandatory platform tag followed by zero or more tags that help differentiate the keyboard from others with the same locale code.

h4. 1.8.1 "Principles for Keyboard Ids":#Principles_for_Keyboard_Ids

The following are the design principles for the ids.

# BCP47 compliant.
## Eg, &quot;en-t-k0-extended&quot;.
# Use the minimal language id based on likelySubtags.
## Eg, instead of en-US-t-k0-xxx, use en-t-k0-xxx. Because there is &lt;likelySubtag from=&quot;en&quot; to=&quot;en&#95;Latn&#95;US&quot;/&gt;, en-US → en.
## The data is in "http://unicode.org/repos/cldr/trunk/common/supplemental/likelySubtags.xml":http://unicode.org/repos/cldr/trunk/common/supplemental/likelySubtags.xml
# The platform goes first, if it exists. If a keyboard on the platform changes over time, both are dated, eg bg-t-k0-chromeos-2011. When selecting, if there is no date, it means the latest one.
# Keyboards are only tagged that differ from the &quot;standard for each platform&quot;. That is, for each language on a platform, there will be a keyboard with no subtags other than the platform.Subtags with a common semantics across platforms are used, such as '-extended', -phonetic, -qwerty, -qwertz, -azerty, ...
# In order to get to 8 letters, abbreviations are reused that are already in "bcp47":http://unicode.org/repos/cldr/trunk/common/bcp47/ -u/-t extensions and in "language-subtag-registry":http://www.iana.org/assignments/language-subtag-registry variants, eg for Traditional use &quot;-trad&quot; or &quot;-traditio&quot; (both exist in "bcp47":http://unicode.org/repos/cldr/trunk/common/bcp47/).
# Multiple languages cannot be indicated, so the predominant target is used.
## For Finnish + Sami, use fi-t-k0-smi or extended-smi
# In some cases, there are multiple subtags, like en-US-t-k0-chromeos-intl-altgr.xml
# Otherwise, platform names are used as a guide.

h3. 1.9 "Platform Behaviors in Edge Cases":#Platform_Behaviors_in_Edge_Cases

Platform

No modifier combination match is available

No map match is available for key position

Transform fails (ie. if ^d is pressed when that transform does not exist)

ChromeOS

Fall back to base

Fall back to character in a keyMap with same &quot;level&quot; of modifier combination. If this character does not exist, fall back to (n-1) level. (This is handled data-generation side).
 In the spec: No output

No output at all

Mac OSX

Fall back to base (unless combination is some sort of keyboard shortcut, eg. cmd-c)

No output

Both keys are output separately

Windows

No output

No output

Both keys are output separately

 

<hr />

Copyright © 2001-2013 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode "Terms of Use":http://unicode.org/copyright.html apply.

Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.

